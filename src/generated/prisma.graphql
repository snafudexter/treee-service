# source: https://eu1.prisma.sh/prabh-8aa6b8/treee-service/dev
# timestamp: Sun Aug 19 2018 15:03:30 GMT+0530 (IST)

type AggregateClass {
  count: Int!
}

type AggregateProfession {
  count: Int!
}

type AggregateQualification {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type BatchPayload {
  """The number of nodes that have been affected by the Batch operation."""
  count: Long!
}

type Class implements Node {
  id: ID!
  name: String!
}

"""A connection to a list of items."""
type ClassConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ClassEdge]!
  aggregate: AggregateClass!
}

input ClassCreateInput {
  name: String!
}

input ClassCreateManyInput {
  create: [ClassCreateInput!]
  connect: [ClassWhereUniqueInput!]
}

"""An edge in a connection."""
type ClassEdge {
  """The item at the end of the edge."""
  node: Class!

  """A cursor for use in pagination."""
  cursor: String!
}

enum ClassOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type ClassPreviousValues {
  id: ID!
  name: String!
}

type ClassSubscriptionPayload {
  mutation: MutationType!
  node: Class
  updatedFields: [String!]
  previousValues: ClassPreviousValues
}

input ClassSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [ClassSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [ClassSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ClassSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: ClassWhereInput
}

input ClassUpdateDataInput {
  name: String
}

input ClassUpdateInput {
  name: String
}

input ClassUpdateManyInput {
  create: [ClassCreateInput!]
  connect: [ClassWhereUniqueInput!]
  disconnect: [ClassWhereUniqueInput!]
  delete: [ClassWhereUniqueInput!]
  update: [ClassUpdateWithWhereUniqueNestedInput!]
  upsert: [ClassUpsertWithWhereUniqueNestedInput!]
}

input ClassUpdateWithWhereUniqueNestedInput {
  where: ClassWhereUniqueInput!
  data: ClassUpdateDataInput!
}

input ClassUpsertWithWhereUniqueNestedInput {
  where: ClassWhereUniqueInput!
  update: ClassUpdateDataInput!
  create: ClassCreateInput!
}

input ClassWhereInput {
  """Logical AND on all given filters."""
  AND: [ClassWhereInput!]

  """Logical OR on all given filters."""
  OR: [ClassWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ClassWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
}

input ClassWhereUniqueInput {
  id: ID
}

enum GENDER {
  M
  F
}

"""
The `Long` scalar type represents non-fractional signed whole numeric values.
Long can represent values between -(2^63) and 2^63 - 1.
"""
scalar Long

type Mutation {
  createUser(data: UserCreateInput!): User!
  createClass(data: ClassCreateInput!): Class!
  createProfession(data: ProfessionCreateInput!): Profession!
  createQualification(data: QualificationCreateInput!): Qualification!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateClass(data: ClassUpdateInput!, where: ClassWhereUniqueInput!): Class
  updateProfession(data: ProfessionUpdateInput!, where: ProfessionWhereUniqueInput!): Profession
  updateQualification(data: QualificationUpdateInput!, where: QualificationWhereUniqueInput!): Qualification
  deleteUser(where: UserWhereUniqueInput!): User
  deleteClass(where: ClassWhereUniqueInput!): Class
  deleteProfession(where: ProfessionWhereUniqueInput!): Profession
  deleteQualification(where: QualificationWhereUniqueInput!): Qualification
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  upsertClass(where: ClassWhereUniqueInput!, create: ClassCreateInput!, update: ClassUpdateInput!): Class!
  upsertProfession(where: ProfessionWhereUniqueInput!, create: ProfessionCreateInput!, update: ProfessionUpdateInput!): Profession!
  upsertQualification(where: QualificationWhereUniqueInput!, create: QualificationCreateInput!, update: QualificationUpdateInput!): Qualification!
  updateManyUsers(data: UserUpdateInput!, where: UserWhereInput): BatchPayload!
  updateManyClasses(data: ClassUpdateInput!, where: ClassWhereInput): BatchPayload!
  updateManyProfessions(data: ProfessionUpdateInput!, where: ProfessionWhereInput): BatchPayload!
  updateManyQualifications(data: QualificationUpdateInput!, where: QualificationWhereInput): BatchPayload!
  deleteManyUsers(where: UserWhereInput): BatchPayload!
  deleteManyClasses(where: ClassWhereInput): BatchPayload!
  deleteManyProfessions(where: ProfessionWhereInput): BatchPayload!
  deleteManyQualifications(where: QualificationWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

"""An object with an ID"""
interface Node {
  """The id of the object."""
  id: ID!
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

type Profession implements Node {
  id: ID!
  name: String!
}

"""A connection to a list of items."""
type ProfessionConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ProfessionEdge]!
  aggregate: AggregateProfession!
}

input ProfessionCreateInput {
  name: String!
}

input ProfessionCreateOneInput {
  create: ProfessionCreateInput
  connect: ProfessionWhereUniqueInput
}

"""An edge in a connection."""
type ProfessionEdge {
  """The item at the end of the edge."""
  node: Profession!

  """A cursor for use in pagination."""
  cursor: String!
}

enum ProfessionOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type ProfessionPreviousValues {
  id: ID!
  name: String!
}

type ProfessionSubscriptionPayload {
  mutation: MutationType!
  node: Profession
  updatedFields: [String!]
  previousValues: ProfessionPreviousValues
}

input ProfessionSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [ProfessionSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [ProfessionSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ProfessionSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: ProfessionWhereInput
}

input ProfessionUpdateDataInput {
  name: String
}

input ProfessionUpdateInput {
  name: String
}

input ProfessionUpdateOneInput {
  create: ProfessionCreateInput
  connect: ProfessionWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: ProfessionUpdateDataInput
  upsert: ProfessionUpsertNestedInput
}

input ProfessionUpsertNestedInput {
  update: ProfessionUpdateDataInput!
  create: ProfessionCreateInput!
}

input ProfessionWhereInput {
  """Logical AND on all given filters."""
  AND: [ProfessionWhereInput!]

  """Logical OR on all given filters."""
  OR: [ProfessionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ProfessionWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
}

input ProfessionWhereUniqueInput {
  id: ID
}

type Qualification implements Node {
  id: ID!
  name: String!
}

"""A connection to a list of items."""
type QualificationConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [QualificationEdge]!
  aggregate: AggregateQualification!
}

input QualificationCreateInput {
  name: String!
}

input QualificationCreateOneInput {
  create: QualificationCreateInput
  connect: QualificationWhereUniqueInput
}

"""An edge in a connection."""
type QualificationEdge {
  """The item at the end of the edge."""
  node: Qualification!

  """A cursor for use in pagination."""
  cursor: String!
}

enum QualificationOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type QualificationPreviousValues {
  id: ID!
  name: String!
}

type QualificationSubscriptionPayload {
  mutation: MutationType!
  node: Qualification
  updatedFields: [String!]
  previousValues: QualificationPreviousValues
}

input QualificationSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [QualificationSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [QualificationSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [QualificationSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: QualificationWhereInput
}

input QualificationUpdateDataInput {
  name: String
}

input QualificationUpdateInput {
  name: String
}

input QualificationUpdateOneInput {
  create: QualificationCreateInput
  connect: QualificationWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: QualificationUpdateDataInput
  upsert: QualificationUpsertNestedInput
}

input QualificationUpsertNestedInput {
  update: QualificationUpdateDataInput!
  create: QualificationCreateInput!
}

input QualificationWhereInput {
  """Logical AND on all given filters."""
  AND: [QualificationWhereInput!]

  """Logical OR on all given filters."""
  OR: [QualificationWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [QualificationWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
}

input QualificationWhereUniqueInput {
  id: ID
}

type Query {
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  classes(where: ClassWhereInput, orderBy: ClassOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Class]!
  professions(where: ProfessionWhereInput, orderBy: ProfessionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Profession]!
  qualifications(where: QualificationWhereInput, orderBy: QualificationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Qualification]!
  user(where: UserWhereUniqueInput!): User
  class(where: ClassWhereUniqueInput!): Class
  profession(where: ProfessionWhereUniqueInput!): Profession
  qualification(where: QualificationWhereUniqueInput!): Qualification
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  classesConnection(where: ClassWhereInput, orderBy: ClassOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ClassConnection!
  professionsConnection(where: ProfessionWhereInput, orderBy: ProfessionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ProfessionConnection!
  qualificationsConnection(where: QualificationWhereInput, orderBy: QualificationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): QualificationConnection!

  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node
}

type Subscription {
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
  class(where: ClassSubscriptionWhereInput): ClassSubscriptionPayload
  profession(where: ProfessionSubscriptionWhereInput): ProfessionSubscriptionPayload
  qualification(where: QualificationSubscriptionWhereInput): QualificationSubscriptionPayload
}

type User implements Node {
  id: ID!
  name: String!
  email: String!
  phone: String!
  tPass: String
  age: Int
  gender: GENDER
  qualification(where: QualificationWhereInput): Qualification
  tutoringExp: Float
  classesTaught(where: ClassWhereInput, orderBy: ClassOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Class!]
  pricePerAnnum: Int
  profession(where: ProfessionWhereInput): Profession
}

"""A connection to a list of items."""
type UserConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  name: String!
  email: String!
  phone: String!
  tPass: String
  age: Int
  gender: GENDER
  tutoringExp: Float
  pricePerAnnum: Int
  qualification: QualificationCreateOneInput
  classesTaught: ClassCreateManyInput
  profession: ProfessionCreateOneInput
}

"""An edge in a connection."""
type UserEdge {
  """The item at the end of the edge."""
  node: User!

  """A cursor for use in pagination."""
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  email_ASC
  email_DESC
  phone_ASC
  phone_DESC
  tPass_ASC
  tPass_DESC
  age_ASC
  age_DESC
  gender_ASC
  gender_DESC
  tutoringExp_ASC
  tutoringExp_DESC
  pricePerAnnum_ASC
  pricePerAnnum_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type UserPreviousValues {
  id: ID!
  name: String!
  email: String!
  phone: String!
  tPass: String
  age: Int
  gender: GENDER
  tutoringExp: Float
  pricePerAnnum: Int
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [UserSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: UserWhereInput
}

input UserUpdateInput {
  name: String
  email: String
  phone: String
  tPass: String
  age: Int
  gender: GENDER
  tutoringExp: Float
  pricePerAnnum: Int
  qualification: QualificationUpdateOneInput
  classesTaught: ClassUpdateManyInput
  profession: ProfessionUpdateOneInput
}

input UserWhereInput {
  """Logical AND on all given filters."""
  AND: [UserWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  email: String

  """All values that are not equal to given value."""
  email_not: String

  """All values that are contained in given list."""
  email_in: [String!]

  """All values that are not contained in given list."""
  email_not_in: [String!]

  """All values less than the given value."""
  email_lt: String

  """All values less than or equal the given value."""
  email_lte: String

  """All values greater than the given value."""
  email_gt: String

  """All values greater than or equal the given value."""
  email_gte: String

  """All values containing the given string."""
  email_contains: String

  """All values not containing the given string."""
  email_not_contains: String

  """All values starting with the given string."""
  email_starts_with: String

  """All values not starting with the given string."""
  email_not_starts_with: String

  """All values ending with the given string."""
  email_ends_with: String

  """All values not ending with the given string."""
  email_not_ends_with: String
  phone: String

  """All values that are not equal to given value."""
  phone_not: String

  """All values that are contained in given list."""
  phone_in: [String!]

  """All values that are not contained in given list."""
  phone_not_in: [String!]

  """All values less than the given value."""
  phone_lt: String

  """All values less than or equal the given value."""
  phone_lte: String

  """All values greater than the given value."""
  phone_gt: String

  """All values greater than or equal the given value."""
  phone_gte: String

  """All values containing the given string."""
  phone_contains: String

  """All values not containing the given string."""
  phone_not_contains: String

  """All values starting with the given string."""
  phone_starts_with: String

  """All values not starting with the given string."""
  phone_not_starts_with: String

  """All values ending with the given string."""
  phone_ends_with: String

  """All values not ending with the given string."""
  phone_not_ends_with: String
  tPass: String

  """All values that are not equal to given value."""
  tPass_not: String

  """All values that are contained in given list."""
  tPass_in: [String!]

  """All values that are not contained in given list."""
  tPass_not_in: [String!]

  """All values less than the given value."""
  tPass_lt: String

  """All values less than or equal the given value."""
  tPass_lte: String

  """All values greater than the given value."""
  tPass_gt: String

  """All values greater than or equal the given value."""
  tPass_gte: String

  """All values containing the given string."""
  tPass_contains: String

  """All values not containing the given string."""
  tPass_not_contains: String

  """All values starting with the given string."""
  tPass_starts_with: String

  """All values not starting with the given string."""
  tPass_not_starts_with: String

  """All values ending with the given string."""
  tPass_ends_with: String

  """All values not ending with the given string."""
  tPass_not_ends_with: String
  age: Int

  """All values that are not equal to given value."""
  age_not: Int

  """All values that are contained in given list."""
  age_in: [Int!]

  """All values that are not contained in given list."""
  age_not_in: [Int!]

  """All values less than the given value."""
  age_lt: Int

  """All values less than or equal the given value."""
  age_lte: Int

  """All values greater than the given value."""
  age_gt: Int

  """All values greater than or equal the given value."""
  age_gte: Int
  gender: GENDER

  """All values that are not equal to given value."""
  gender_not: GENDER

  """All values that are contained in given list."""
  gender_in: [GENDER!]

  """All values that are not contained in given list."""
  gender_not_in: [GENDER!]
  tutoringExp: Float

  """All values that are not equal to given value."""
  tutoringExp_not: Float

  """All values that are contained in given list."""
  tutoringExp_in: [Float!]

  """All values that are not contained in given list."""
  tutoringExp_not_in: [Float!]

  """All values less than the given value."""
  tutoringExp_lt: Float

  """All values less than or equal the given value."""
  tutoringExp_lte: Float

  """All values greater than the given value."""
  tutoringExp_gt: Float

  """All values greater than or equal the given value."""
  tutoringExp_gte: Float
  pricePerAnnum: Int

  """All values that are not equal to given value."""
  pricePerAnnum_not: Int

  """All values that are contained in given list."""
  pricePerAnnum_in: [Int!]

  """All values that are not contained in given list."""
  pricePerAnnum_not_in: [Int!]

  """All values less than the given value."""
  pricePerAnnum_lt: Int

  """All values less than or equal the given value."""
  pricePerAnnum_lte: Int

  """All values greater than the given value."""
  pricePerAnnum_gt: Int

  """All values greater than or equal the given value."""
  pricePerAnnum_gte: Int
  qualification: QualificationWhereInput
  classesTaught_every: ClassWhereInput
  classesTaught_some: ClassWhereInput
  classesTaught_none: ClassWhereInput
  profession: ProfessionWhereInput
}

input UserWhereUniqueInput {
  id: ID
}
